% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ram.R
\name{ram_Sigmatheta}
\alias{ram_Sigmatheta}
\title{Reticular Action Model - Model-Implied Variance-Covariance Matrix
\eqn{ \boldsymbol{\Sigma} \left( \boldsymbol{\theta} \right)}}
\usage{
ram_Sigmatheta(A, S, filter)
}
\arguments{
\item{A}{\verb{p x p} numeric matrix
\eqn{\mathbf{A}_{p \times p}}.
Asymmetric paths (single-headed arrows),
such as regression coefficients and factor loadings.}

\item{S}{\verb{p x p} numeric matrix
\eqn{\mathbf{S}_{p \times p}}.
Symmetric paths (double-headed arrows),
such as variances and covariances.}

\item{filter}{\verb{k x p} numeric matrix
\eqn{\mathbf{F}_{k \times p}}.
Filter matrix used to select variables.}
}
\value{
Returns the model-implied variance-covariance matrix
\eqn{\boldsymbol{\Sigma} \left( \boldsymbol{\theta} \right)}
derived from the \code{A}, \code{S}, and \code{filter} matrices.
}
\description{
Derives the model-implied variance-covariance matrix
\eqn{ \boldsymbol{\Sigma} \left( \boldsymbol{\theta} \right)
    %(\#eq:sem-Sigmatheta)
  }
using the Reticular Action Model (RAM) notation.
}
\details{
The model-implied variance-covariance matrix
\eqn{ \boldsymbol{\Sigma} \left( \boldsymbol{\theta} \right)}
as a function of Reticular Action Model (RAM) matrices
is given by
\deqn{ \boldsymbol{\Sigma} \left( \boldsymbol{\theta} \right)
    =
    \mathbf{F} \left( \mathbf{I} - \mathbf{A} \right)^{-1} \mathbf{S}
    \left[ \left( \mathbf{I} - \mathbf{A} \right)^{-1} \right]^{\prime}
    \mathbf{F}^{\prime}}
where
\itemize{
\item \eqn{\mathbf{A}} represents asymmetric paths (single-headed arrows),
such as regression coefficients and factor loadings.
\item \eqn{\mathbf{S}} represents symmetric paths (double-headed arrows),
such as variances and covariances.
\item \eqn{\mathbf{F}} represents the filter matrix
used to select the observed variables.
\item \eqn{\mathbf{I}} represents the identity matrix.
}

The dimensions of the matrices are as follows:

\deqn{
    \mathbf{A}_{p \times p}, \\
    \mathbf{S}_{p \times p}, \\
    \mathbf{I}_{p \times p}, \\
    \mathbf{F}_{k \times p}, \\
    \boldsymbol{\Sigma} \left( \boldsymbol{\theta} \right)_{k \times k}
  }

where
\itemize{
\item \eqn{k} number of observed variables
\item \eqn{q} number of latent variables
\item \eqn{p} number of observed and latent variables, that is \eqn{k + q}
}

\eqn{\mathbf{I}} is an identity matrix,
meaning the diagonal elements are ones,
and the off-diagonal elements are zeroes.
Since \eqn{\mathbf{I}} has the same dimensions
as \eqn{\mathbf{A}_{p \times p}}, and \eqn{\mathbf{S}_{p \times p}},
the function derives \eqn{\mathbf{I}} automatically.

\eqn{\mathbf{F}} is a filter matrix.
The number of columns \eqn{p}
represent the number of observed and latent variables.
The number of rows represent the number of observed variables.
The off-diagonal elements are set to zero.
The diagonal elements are set to zero or one.
Setting the \eqn{k}-th diagonal element to \strong{one filters in}
the variable that corresponds to that position.
}
\examples{
library(lavaan)
library(semPlot)
#-----------------------------------------------------------------------------
# Simple mediation model with observed variables------------------------------
# The variables in the model are X, M, and Y.
# All three are observed variables.
#-----------------------------------------------------------------------------
alpha <- 0.3385926
beta <- 0.4510391
tauprime <- 0.2076475
sigma2X <- 1.2934694
sigma2epsilonM <- 0.9296694
sigma2epsilonY <- 0.9310601
A <- matrix(data = 0, nrow = 3, ncol = 3)
A[2, 1] <- alpha
A[3, 1] <- beta
A[3, 2] <- tauprime
S <- diag(c(sigma2X, sigma2epsilonM, sigma2epsilonY))
filter <- diag(3)
colnames(A) <- c("X", "M", "Y")
rownames(A) <- c("X", "M", "Y")
colnames(S) <- c("X", "M", "Y")
rownames(S) <- c("X", "M", "Y")
colnames(filter) <- c("X", "M", "Y")
rownames(filter) <- c("X", "M", "Y")
Sigma <- ram_Sigmatheta(A = A, S = S, filter = filter)
Sigma

#-----------------------------------------------------------------------------
# Simple mediation model with observed variables------------------------------
# and latent variable error terms---------------------------------------------
# The same mediation model can be parameterized by explicitly
# including the error terms epsilonM and epsilonY in the matrices.
# The variables in the model are X, M, Y, epsilonM, and epsilonY.
# X, M, and Y are observed variables.
# epsilonM, and epsilonY are latent variables.
#-----------------------------------------------------------------------------
A <- matrix(data = 0, nrow = 5, ncol = 5)
A[2, 1] <- alpha
A[2, 4] <- 1
A[3, 1] <- beta
A[3, 2] <- tauprime
A[3, 5] <- 1
S <- diag(c(sigma2X, 0, 0, sigma2epsilonM, sigma2epsilonY))
filter <- matrix(data = 0, nrow = 3, ncol = 5)
filter[1, 1] <- 1
filter[2, 2] <- 1
filter[3, 3] <- 1
colnames(A) <- c("X", "M", "Y", "epsilonM", "epsilonY")
rownames(A) <- c("X", "M", "Y", "epsilonM", "epsilonY")
colnames(S) <- c("X", "M", "Y", "epsilonM", "epsilonY")
rownames(S) <- c("X", "M", "Y", "epsilonM", "epsilonY")
colnames(filter) <- c("X", "M", "Y", "epsilonM", "epsilonY")
rownames(filter) <- c("X", "M", "Y")
Sigma <- ram_Sigmatheta(A = A, S = S, filter = filter)
Sigma
# model specification
model <- "
  M ~ X
  Y ~ X + M
  X ~~ X
  M ~~ M
  Y ~~ Y
"
# model fitting
fit <- sem(
  model,
  sample.cov = Sigma,
  sample.nobs = 50
)
# results
summary(fit, fit.measures = TRUE, standardized = TRUE)
semPaths(fit, what = "path", whatLabels = "est", style = "ram")

# One-factor CFA model--------------------------------------------------------
# The variables in the model are eta, y1, y2, y3, y4, y5.
# eta is a latent variable. y1 to y5 are observed variables.
#-----------------------------------------------------------------------------
A <- matrix(data = 0, ncol = 6, nrow = 6)
loadings <- 0.5 # tau equivalence
for (i in 2:6) {
  A[i, 1] <- 0.5
}
S <- diag(c(1, 0.75, 0.75, 0.75, 0.75, 0.75))
filter <- diag(nrow(A) - 1)
filter <- cbind(0, filter)
colnames(A) <- c("eta", "y1", "y2", "y3", "y4", "y5")
rownames(A) <- c("eta", "y1", "y2", "y3", "y4", "y5")
colnames(S) <- c("eta", "y1", "y2", "y3", "y4", "y5")
rownames(S) <- c("eta", "y1", "y2", "y3", "y4", "y5")
colnames(filter) <- c("eta", "y1", "y2", "y3", "y4", "y5")
rownames(filter) <- c("y1", "y2", "y3", "y4", "y5")
Sigma <- ram_Sigmatheta(A = A, S = S, filter = filter)
model <- "
  eta =~ NA * y1 + y2 + y3 + y4 + y5
  eta ~~ 1 * eta
"
# model fitting
fit <- sem(
  model,
  sample.cov = Sigma,
  sample.nobs = 100
)
# results
summary(fit, fit.measures = TRUE, standardized = TRUE)
semPaths(fit, what = "path", whatLabels = "est", style = "ram")
}
\references{
McArdle, J. J. (2013).
The development of the RAM rules for latent variable structural equation modeling.
In A. Maydeu-Olivares & J. J. McArdle (Eds.),
\emph{Contemporary Psychometrics: A festschrift for Roderick P. McDonald} (pp. 225--273).
Lawrence Erlbaum Associates.

McArdle, J. J., & McDonald, R. P. (1984).
Some algebraic properties of the Reticular Action Model for moment structures.
\emph{British Journal of Mathematical and Statistical Psychology}, \emph{37} (2), 234--251.
}
\seealso{
Other SEM notation functions: 
\code{\link{ram_M}()},
\code{\link{ram_S}()},
\code{\link{ram_mutheta}()},
\code{\link{ram_res}()},
\code{\link{ram_sigma2}()}
}
\author{
Ivan Jacob Agaloos Pesigan
}
\concept{SEM notation functions}
\keyword{matrix}
\keyword{ram}
